Установка и настройка
Сначала установите необходимые зависимости:

bash
npm init -y
npm install @playwright/test
npm install typescript --save-dev
Тестовые сценарии
typescript
import { test, expect, Page } from '@playwright/test';

const BASE_URL = 'https://makarovartem.github.io/frontend-avito-tech-test-assignment';

test.describe('Тестирование карточек игр', () => {
  let page: Page;

  test.beforeAll(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto(BASE_URL);
  });

  test.afterAll(async () => {
    await page.close();
  });

  // Тест-кейс 1.1
  test('Открытие карточки игры Tarisland, Overwatch 2, PUBG: BATTLEGROUNDS, Enlisted, FragPunk', async () => {
    const gameNames = ['Tarisland', 'Overwatch 2', 'PUBG: BATTLEGROUNDS', 'Enlisted', 'FragPunk'];
    
    for (const gameName of gameNames) {
      await test.step(`Проверка карточки игры ${gameName}`, async () => {
        // Клик на карточку игры
        await page.click(`text=${gameName}`);
        
        // Проверка отображения информации по карточке
        await expect(page.locator('.game-details')).toBeVisible();
        await expect(page.locator(`text=${gameName}`).toBeVisible();
        
        // Возврат на главную
        await page.click('text=Back to list');
        
        // Проверка отображения всех карточек
        await expect(page.locator('.game-card')).toHaveCountGreaterThan(5);
      });
    }
  });

  // Тест-кейс 1.2
  test('Открытие карточки игры Forge of Empires, Game Of Thrones Winter Is Coming', async () => {
    const gameNames = ['Forge of Empires', 'Game Of Thrones Winter Is Coming'];
    
    for (const gameName of gameNames) {
      await test.step(`Проверка карточки игры ${gameName}`, async () => {
        // Клик на карточку игры
        await page.click(`text=${gameName}`);
        
        // Проверка отображения информации по карточке
        await expect(page.locator('.game-details')).toBeVisible();
        await expect(page.locator(`text=${gameName}`)).toBeVisible();
        
        // Проверка наличия параметров игры
        await expect(page.locator('.game-parameters')).toBeVisible();
        
        // Возврат на главную
        await page.click('text=Back to list');
        
        // Проверка отображения всех карточек
        await expect(page.locator('.game-card')).toHaveCountGreaterThan(5);
      });
    }
  });

  // Тест-кейс 1.3
  test('Отображение разного количества карточек игр на странице поиска', async () => {
    const categories = ['Sports', 'Strategy', 'Shooter'];
    
    for (const category of categories) {
      await test.step(`Проверка фильтрации по категории ${category}`, async () => {
        // Выбор категории
        await page.selectOption('select[name="category"]', category);
        
        // Ожидание обновления списка
        await page.waitForTimeout(1000);
        
        // Получение количества карточек
        const cards = await page.locator('.game-card').count();
        
        // Проверка что карточки отображаются
        expect(cards).toBeGreaterThan(0);
        
        // Проверка что карточки соответствуют категории
        if (cards > 0) {
          const firstCardCategory = await page.locator('.game-card .game-category').first().textContent();
          expect(firstCardCategory?.toLowerCase()).toContain(category.toLowerCase());
        }
        
        // Сброс фильтра
        await page.selectOption('select[name="category"]', '');
      });
    }
  });

  // Тест-кейс 1.4
  test('Переход по страницам результата поиска с помощью пагинации', async () => {
    // Получаем количество страниц
    const lastPageButton = await page.locator('.pagination li:last-child a');
    const lastPageNumber = parseInt(await lastPageButton.textContent() || '1');
    
    // Проверяем первую страницу
    await expect(page.locator('.game-card')).toHaveCountGreaterThan(0);
    const firstPageCards = await page.locator('.game-card').count();
    
    // Переходим на вторую страницу
    await page.click('.pagination li:nth-child(3) a'); // Предполагаем, что это кнопка "2"
    await page.waitForTimeout(1000);
    await expect(page.locator('.game-card')).toHaveCountGreaterThan(0);
    const secondPageCards = await page.locator('.game-card').count();
    expect(secondPageCards).toBe(firstPageCards);
    
    // Переходим на последнюю страницу
    await lastPageButton.click();
    await page.waitForTimeout(1000);
    await expect(page.locator('.game-card')).toHaveCountGreaterThan(0);
    
    // Возвращаемся на первую страницу
    await page.click('.pagination li:first-child a');
    await page.waitForTimeout(1000);
    await expect(page.locator('.game-card')).toHaveCountGreaterThan(0);
  });

  // Тест-кейс 1.5
  test('Изменение количества карточек на странице', async () => {
    const itemsPerPageOptions = ['10', '20', '50', '100'];
    
    for (const option of itemsPerPageOptions) {
      await test.step(`Проверка отображения ${option} карточек на странице`, async () => {
        // Выбираем количество карточек на странице
        await page.selectOption('select[name="itemsPerPage"]', option);
        await page.waitForTimeout(1500);
        
        // Проверяем количество карточек
        const expectedCount = parseInt(option);
        const actualCount = await page.locator('.game-card').count();
        
        // Проверяем что количество карточек не превышает выбранное значение
        expect(actualCount).toBeLessThanOrEqual(expectedCount);
        
        // Проверяем пагинацию (должно быть меньше страниц при большем количестве карточек на странице)
        const paginationItems = await page.locator('.pagination li').count();
        
        // Для 100 карточек на странице пагинация должна исчезнуть (если общее количество карточек меньше 100)
        if (option === '100') {
          const totalCards = await page.locator('.game-card').count();
          if (totalCards <= 100) {
            await expect(page.locator('.pagination')).toHaveCount(0);
          } else {
            await expect(page.locator('.pagination')).toHaveCount(1);
          }
        } else {
          await expect(page.locator('.pagination')).toHaveCount(1);
        }
      });
    }
  });
});
Запуск тестов
Создайте файл playwright.config.ts для настройки:

typescript
import { PlaywrightTestConfig } from '@playwright/test';

const config: PlaywrightTestConfig = {
  testDir: './',
  testMatch: '*.spec.ts',
  timeout: 30000,
  retries: 1,
  workers: 1,
  use: {
    headless: false,
    viewport: { width: 1280, height: 720 },
    actionTimeout: 10000,
    ignoreHTTPSErrors: true,
    video: 'on-first-retry',
    screenshot: 'only-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { browserName: 'chromium' },
    },
    {
      name: 'firefox',
      use: { browserName: 'firefox' },
    },
    {
      name: 'webkit',
      use: { browserName: 'webkit' },
    },
  ],
};

export default config;
Для запуска тестов добавьте в package.json:

json
"scripts": {
  "test": "playwright test"
}
Затем выполните:

bash
npm test